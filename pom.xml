<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--指定项目所在的路径-->
    <groupId>com.pn</groupId>
    <!--指明项目的名称-->
    <artifactId>warehouse</artifactId>
    <!--项目当前的版本-->
    <version>0.0.1-SNAPSHOT</version>
    <!--项目的名称-->
    <name>warehouse</name>
    <!--项目的描述-->
    <description>Demo project for Spring Boot</description>
    <!--在properties中一般定义：统一springboot依赖所需要的版本号-->
    <properties>
        <!--jdk的版本-->
        <java.version>17</java.version>
        <!--指定项目所需要的编码格式-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--指定项目输出的编码格式-->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--统一springboot的版本号-->
        <spring-boot.version>2.3.1.RELEASE</spring-boot.version>
    </properties>
    <!--在dependencies里面定义该项目所需要的全部的依赖（包）-->
    <dependencies>
        <!--web依赖-->
        <!--每一个dependency表示一个依赖-->
        <dependency>
            <!--指明当前的依赖所存放的路径-->
            <groupId>org.springframework.boot</groupId>
            <!--依赖的名称-->
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--mybatis的依赖-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.4</version>
        </dependency>
        <!--mysql驱动依赖-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.25</version>
        </dependency>
        <!--redis依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis-reactive</artifactId>
        </dependency>
        <!--lombok注解依赖-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--fastjson依赖：将后端获取到的数据对象给转换成json字符串，然后在返回给前端-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.79</version>
        </dependency>
        <!--JSR-303依赖：对输入的数据进行校验-->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.2.0.Final</version>
        </dependency>
        <!--生成验证码的依赖-->
        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>2.3.2</version>
        </dependency>
        <!--pinyin4j的依赖：将汉字转换成拼音的工具-->
        <dependency>
            <groupId>com.belerweb</groupId>
            <artifactId>pinyin4j</artifactId>
            <version>2.5.1</version>
        </dependency>
        <!--commons-lang依赖：可以提供很多的工具类（可以少写很多的代码）-->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <!--jwt依赖：服务器认证之后，会生成一个json对象，然后在返回给前端-->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.18.3</version>
        </dependency>
        <!--测试依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!--测试依赖有两个，需要排除掉一个-->
            <exclusions>
                <!--此处定义要被排除的依赖-->
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <!--
        定义依赖的版本控制：引入SpringBoot版本仲裁中心的工程并且指定其版本
        也就是说控制了整个SpringBoot所有相关依赖的版本
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <!--给出构建过程中所需要用到的插件-->
        <plugins>
            <!--添加该插件之后，运行mvn package进行打包时，会打包成一个可直接运行的jar文件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <!--排除此依赖-->
                <executions>
                    <execution>
                        <id>repackage</id>
                        <!--创建一个可以自动执行的jar或者war文件-->
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>7</source>
                    <target>7</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
